{
  "type": "service_account",
  "project_id": "django-deploy-356017",
  "private_key_id": "8b1f601044c8768485497a2861a7e66d234ad2e7",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDGIMUeEeYOTCgi\ngtTttLz0nX0+VGswPUloA+HmffoF3LeqaPXHKVQPGb8CHSnx73p5SsUF8uWLXEIT\neIwLbDow1cXCV4/6igxDIV0fZ66kguDTVyoZC80XPGe/a+uRfRmZQDWOQxpHkXzC\nodqfkhyiB5ZRbyo6hdwsOO//UaSJmEumgwkHk++iq721BwkFcSMdtF0veASyo5uD\nvqRhEbQIGzRaKOz5XI8Nq0FEkqDajplTMcCGWNCCBTNTaCP2aekb/IVYK9/0jxrh\neEp+333p3SdMcurYyCfkKU+yJ+fMta+Nnvzu9LETII3jun0e6CHLhpbpFupuHfjX\nGoP27EJlAgMBAAECggEAHP64ukDWUStWCE7rSGpV6NqPdKq4ERQ3BPDkg23WRDtb\n6aV4qo/izF7xNCb+d3ibjNqjYM5+R1nWFbFjlVxeW709NsbHvFutlblxPmJXDZ5V\ntrgf4hB3EDp32Gy7ycvsDiB2df5d/zFMd9NmAkpIxHGlzv8cx/nFEfe3L79L/BK6\nuC68lNo6Ve5MO+56OonCIaQexw5DGOfES442QsVRlle72hm2ANE565lcGOT9TrpP\nUwEAWVGALJeVhdL2lgrZptBuRuI79Lp6/BZ8W/sUAx2dn9oBnpfiL0WcSd8VUgOD\nOCNceKhR39yuEXifYfbrBBWh0gKwnkVgba9KjDxy1QKBgQDmS11Ba5F1zDWL3IGt\nDh1d5Ojjm4I1kMhJE301d4HmxsMdIGLE0Xs+Hg8MkD8HdicEoMdWaMze+BlrBDO9\nja630tLwz5I/irUlYcsAjU+E8AwmeY4LQP9qdaAlZHzLtRBnN0wUDYYMJC7Q1ame\ncibIq2soh4oHMHzilA7m5YRQ/wKBgQDcPkFHSWdrO6+1/X8iw/IxxCwPm3Whq/1m\n5wUkQZNQxjTuvSKxte1ccduv042znGn7UW+i/KPK8KnuVYtZwdEB/0A9MKMo6nC4\npziwBuCbvJGk4pk+R23BARr3jLRJW9/CAdsZ4tNkJdWUo8Lamh3PBcWX3pZYr2qC\nrpElV3jImwKBgQDkGu4J6JQxy82V9Rn04bAw2pXbLKMyj2/zAfzZQsBGZ8XHSdbL\nAHtEMd3SIeZsa5mGOgJ4EmIq0C/NEmJ1dKsEpSwPHmrLyYZXup+qsk17bZF7YpdR\nilXziwLPRtNdqsDOm7Udf6+wwv4kGB5kNMk5pqEDig0rxdlNTD3ecqQ23QKBgQCp\nCNLbHphUMeQC3oNEMHVjArf6ZotawQDkiGxmzjl9ZhJcJSdKk2GQcQZ2JPz9nA+v\nRmpTAmnHqPwTIu6nvdxnFvu7uueO0Jgg8J7OYwjiHlD95rhMl0/CMNH8qq34G55Z\nbUk2zeMGWw9YXHOBiYVVTY3AqKJlgIRTth1KNp9J/wKBgQDhylm8mn6JmZui9A+J\n8Uo0Gd24PGniHtFzQo6VH7zB4WdRMtO3Gcl6YLMDRdlNCNFBGAHNS+QB76HJ3vMT\nG8Fw4YxBBBeLG8ZjvoHTkbQa8ThLulv855ER7hpsv+CTCpTDDIPRj9PNpIWATeFd\no2J3WLCj7EpMzIE4nPombDzj/A==\n-----END PRIVATE KEY-----\n",
  "client_email": "django-account@django-deploy-356017.iam.gserviceaccount.com",
  "client_id": "115906174536589106862",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/django-account%40django-deploy-356017.iam.gserviceaccount.com"
}

python create_app_engine_queue_task.py --project=$PROJECT_ID
--location=$LOCATION_ID --queue=$QUEUE_ID --payload=hello

{
  "type": "service_account",
  "project_id": "django-deploy-356017",
  "private_key_id": "6279440673cbb1a85d997a88801271e1dee114cf",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDD6+gnFBwCF294\nvKuPR3BKbsOJxbaJpA3XHwUkcze1MX6aq2D/6rCnYn/4F0U791ymhBXqUUIg1n4c\n1ZX0neo7HEduPq3tRYWIRIdRx2Qbei3AmkjRBzYaeVgJH4nD6H60DzXZOEmYyG6e\nFAKYUaS7oh0t7ORHZi9nhqN/RfJ57QpfdpJ4kRN8GshnTteC26hXEUj9Mp2P71WB\njCrdV5/F0+mJBDTXmv1XLa1vjzD4yusjWtESQIQ+FxIU9kPD+gB0BHk8jNsPSJsZ\n8ki/XseybgQL4BIhZOyIUekoDThCGtu9BO0XILdBYtF3Em6ar75p0CzXLgyyADcn\nUsNIabSPAgMBAAECggEAXz9wBJeVKjskeUkYCrcLU1RYAcG6BV5ZUC0Hffn5qkAe\nsakBpkj9itKrLfx6LzYJt/ZdBSZuBLLiarg3h83B0uzjmSglvEVhLqdKNiq+c1FJ\nruoS3nQoDGTTtNO9UR3Vg0olvq3Lsdg3VuiZfl2qvYGJuAsDy+ZUw3rEP5rM0BLf\n3gh7oHtmzREXcBNd7XPjUwADtVWTBo/UZID5rKhJcDMfAH5+H4PLvATk/46U21z5\nx/sTsqpFg+pJ2/irKTdqM6Yu68q1A61lhJEKjnAnFrkOZcUoIDX03l5Z6R4Uz8AO\nDglZ7II3Sxv1tDO2nXUI2nqN3wS+O8sVNyAoAv0DsQKBgQDyHPp1eXFF/TMlxqc5\nVoytOqmE5dnp4YR8k/SybJNAromp5z+IcnAcgwIQTnPQJ8h32c2l3MgzJb42qXk5\nBh+f0k5j6Ot4pb1f+yusM7BMvPUaqhVfxbszFoNCE8kSZLgZUJlhenQeC4KliRQY\nrxw/3YCzW78rr6d+mhyCw/g5twKBgQDPKK6TPxsduG+Cag8lxYLvtdhadioCF8Oe\nCaFqjyOqJB4F2RWm+LiYiEBmYkgKdz64DvItmOkBPBaBt1VruUrpM0zzN/5LJe1H\nfogCtq28ox0IFbJiSY05VV61SgUO9WlE8RTCvZeSnoUreGpZq9BhXHelb77VDIY0\n14H2u1A76QKBgBUQnGH4LPjP7NFOlWIRu6+euP0NGoaUznggT1vuwmkQRn331rlC\na6qvY1CT4tOrgm+bDZ9utCRvFjufRyLE+59mJtfefg5DLVTaf5Q98wraLeEiBzYL\n+Buby9PF8OqexL2/G3k1tECg877/TDZRlf2gggAY7WsZn1MOiYh/EGvFAoGBAKCZ\n8X3GVsdbzVdV0hh+X1xnpiu7oCWvNsC2xqVOA2BMT9pIyjiAatwWBZdaam9ysvUO\n4UHoYfvLEcfO0jKJnEHeu7Fzn3mzFZlvxxITfe3YpxE1gO4iB5KDVMFHeVR3ff0s\nyeOQCIpqyuNAn3KVeR+CCGABmfihlQoyaVdXMITBAoGBALMV2QIrWUd6Oil9MboF\nfWuXrLJECbto+DHNUmfgekxwI591hDsip3yqsFDuEWI01NhxIpDpysKxRAim41M1\niqlbZA9nxTJHgHIof/3vlFhEyoFodpGA6/c+C+o/74ze2xNY1qayZXoP7EjJ0DKZ\nfadvllWtKohBgjhQCiPP0ArR\n-----END PRIVATE KEY-----\n",
  "client_email": "django-task@django-deploy-356017.iam.gserviceaccount.com",
  "client_id": "112880093183111022276",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/django-task%40django-deploy-356017.iam.gserviceaccount.com"
}



from google.cloud import tasks_v2
from google.protobuf import timestamp_pb2
import datetime
import json
def cae():
    # Create a client.
    client = tasks_v2.CloudTasksClient.from_service_account_file('key.json')

    # TODO(developer): Uncomment these lines and replace with your values.
    project = 'django-deploy-356017'
    queue = 'queue'
    location = 'us-central1'
    payload = 'hello' #or {'param': 'value'} for application/json
    in_seconds = None

    # Construct the fully qualified queue name.
    parent = client.queue_path(project, location, queue)

    # Construct the request body.
    task = {
            'app_engine_http_request': {  # Specify the type of request.
                'http_method': tasks_v2.HttpMethod.POST,
                'relative_uri': '/example_task_handler'
            }
    }
    if payload is not None:
        if isinstance(payload, dict):
            # Convert dict to JSON string
            payload = json.dumps(payload)
            # specify http content-type to application/json
            task["app_engine_http_request"]["headers"] = {"Content-type": "application/json"}
        # The API expects a payload of type bytes.
        converted_payload = payload.encode()

        # Add the payload to the request.
        task['app_engine_http_request']['body'] = converted_payload

    if in_seconds is not None:
        # Convert "seconds from now" into an rfc3339 datetime string.
        d = datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(seconds=in_seconds)

        # Create Timestamp protobuf.
        timestamp = timestamp_pb2.Timestamp()
        timestamp.FromDatetime(d)

        # Add the timestamp to the tasks.
        task['schedule_time'] = timestamp

    # Use the client to build and send the task.
    response = client.create_task(parent=parent, task=task)

    print('Created task {}'.format(response.name))
    return response
# [END cloud_tasks_appengine_create_task]
cae()
